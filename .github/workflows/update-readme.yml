name: Update README with Project Links

on:
  push:
  schedule:
    - cron: '0 0 1 * *'  # Monthly on the 1st

permissions:
  contents: write

env:
  TOP_N: 5  # Number of newest repos to display

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Skip if last commit < 24h ago
      - name: Check last commit time
        run: |
          LAST_COMMIT_TIME=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT_TIME))
          if [ $TIME_DIFF -lt 86400 ]; then
            echo "Last commit less than 24 hours ago. Skipping update."
            exit 0
          fi

      # 3. Extract existing project lines from README
      - name: Extract existing project links
        run: |
          awk '/^## Projects/{flag=1; next} /^## /{flag=0} flag' README.md > existing_projects.md || true

      # 4. Fetch top N newest repos excluding the current repo
      - name: Fetch top N newest repos
        run: |
          FULL_REPO="${{ github.repository }}"
          REPO_NAME="${FULL_REPO#*/}"
          echo "Excluding current repo: $REPO_NAME"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.repository_owner }}/repos?type=public&per_page=100&sort=updated" \
          | jq -r --arg repo "$REPO_NAME" --argjson n $TOP_N \
            'map(select(.fork == false and .name != $repo)) | sort_by(.updated_at) | reverse | .[:$n][] | "- [\(.name)](\(.html_url))"' > fetched_projects.md

          echo "Fetched top $TOP_N projects:"
          cat fetched_projects.md

      # 5. Merge existing custom names with fetched repos using Python
      - name: Merge with Python
        run: |
          python3 - <<'EOF'
          import re

          # Read fetched top N repos
          with open("fetched_projects.md", "r") as f:
              fetched_lines = [line.strip() for line in f if line.strip()]

          # Extract URL + default line mapping
          fetched = []
          for line in fetched_lines:
              match = re.search(r"\((https://github\.com/[^)]+)\)", line)
              if match:
                  fetched.append((match.group(1), line))

          # Read existing project section
          try:
              with open("existing_projects.md", "r") as f:
                  existing_lines = [line.strip() for line in f if line.strip()]
          except FileNotFoundError:
              existing_lines = []

          # Build URL â†’ custom line mapping from existing README
          existing_map = {}
          for line in existing_lines:
              match = re.search(r"\((https://github\.com/[^)]+)\)", line)
              if match:
                  existing_map[match.group(1)] = line  # preserve custom names

          # Build final list (only top N repos)
          final_lines = []
          for url, default_line in fetched:
              if url in existing_map:
                  final_lines.append(existing_map[url])  # keep custom
              else:
                  final_lines.append(default_line)  # fallback to default

          # Sort alphabetically (case-insensitive)
          final_lines.sort(key=lambda x: x.lower())

          # Save final list
          with open("sorted_projects.md", "w") as f:
              f.write("\n".join(final_lines) + "\n")

          print("Final strictly top N project list:")
          print("\n".join(final_lines))
          EOF

      # 6. Replace README section with new list
      - name: Update README.md
        run: |
          awk '
            BEGIN { in_projects=0 }
            /^## Projects/ {
              print
              print ""  # blank line after header
              while ((getline line < "sorted_projects.md") > 0) print line
              close("sorted_projects.md")
              print ""  # blank line before next section
              in_projects=1
              next
            }
            in_projects && /^## / { in_projects=0 }
            !in_projects
          ' README.md > README.tmp
          mv README.tmp README.md

      # 7. Commit changes if any
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Update README with top $TOP_N newest project links" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push origin main

      # 8. Cleanup temp files
      - name: Clean up temporary files
        run: rm -f *.md
