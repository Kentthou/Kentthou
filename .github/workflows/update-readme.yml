name: Update README with Project Links

on:
  push:
  schedule:
    - cron: '0 0 1 * *'  # Monthly on the 1st

permissions:
  contents: write

env:
  TOP_N: 5  # Number of newest repos to display

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Skip if last commit < 24h ago to avoid too frequent updates
      - name: Check last commit time
        run: |
          LAST_COMMIT_TIME=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT_TIME))
          if [ $TIME_DIFF -lt 86400 ]; then
            echo "Last commit less than 24 hours ago. Skipping update."
            exit 0
          fi

      # Step 3: Extract existing project links from README (to keep custom display names)
      - name: Extract existing project links
        run: |
          # Extract lines between "## Projects" and next section header starting with ##
          awk '/^## Projects/{flag=1; next} /^## /{flag=0} flag' README.md > existing_projects.md || true

      # Step 4: Fetch all public repos, exclude current repo, get top N newest by updated date
      - name: Fetch top N newest repos excluding the current repo itself
        run: |
          FULL_REPO="${{ github.repository }}"
          REPO_NAME="${FULL_REPO#*/}"
          echo "Excluding current repo: $REPO_NAME"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.repository_owner }}/repos?type=public&per_page=100&sort=updated" \
          | jq -r --arg repo "$REPO_NAME" --argjson n $TOP_N \
            'map(select(.fork == false and .name != $repo)) | sort_by(.updated_at) | reverse | .[:$n][] | "- [\(.name)](\(.html_url))"' > fetched_projects.md

          echo "Fetched top $TOP_N projects:"
          cat fetched_projects.md

      # Step 5: Merge existing custom names with fetched repos; keep only top N; sort alphabetically
      - name: Merge preferred names + fetched repos, filter top N, sort alphabetically
        run: |
          # Extract URLs from fetched repos for filtering
          awk '{ match($0, /\((https:\/\/github\.com\/[^)]+)\)/, a); print a[1] }' fetched_projects.md > fetched_urls.txt

          # Filter existing projects to only keep those present in fetched top N URLs (to drop old projects)
          grep -Ff fetched_urls.txt existing_projects.md > preferred_existing_filtered.md || true

          # Combine preferred existing filtered + fetched (for any new repos without custom names)
          cat preferred_existing_filtered.md fetched_projects.md | grep -v '^\s*$' > merged_all.md

          # Deduplicate by URL, preferring first occurrence (custom names if any)
          awk '{
            match($0, /\((https:\/\/github\.com\/[^)]+)\)/, arr)
            url = arr[1]
            if (!seen[url]++) print $0
          }' merged_all.md > deduped.md

          # Sort alphabetically by display text (case-insensitive)
          sort -f deduped.md > sorted_projects.md

          echo "Final project list for README:"
          cat sorted_projects.md

          # Replace the "## Projects" section in README with this list
          awk '
            BEGIN { in_projects=0 }
            /^## Projects/ {
              print
              print ""  # blank line after header
              while ((getline line < "sorted_projects.md") > 0) print line
              close("sorted_projects.md")
              print ""  # blank line before next section
              in_projects=1
              next
            }
            in_projects && /^## / { in_projects=0 }
            !in_projects
          ' README.md > README.tmp

          mv README.tmp README.md

      # Step 6: Commit changes if any
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Update README with top $TOP_N newest project links" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push origin main

      # Step 7: Cleanup temp files
      - name: Clean up temporary files
        run: rm -f *.md *.txt
