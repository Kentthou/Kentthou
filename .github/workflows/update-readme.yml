name: Update README with Project Links

on:
  push:
  schedule:
    - cron: '0 0 1 * *'  # Monthly on the 1st

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Skip if last commit was < 24 hours ago
      - name: Check last commit time
        run: |
          LAST_COMMIT_TIME=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT_TIME))
          if [ $TIME_DIFF -lt 86400 ]; then
            echo "Last commit was less than 24 hours ago. Skipping update."
            exit 0
          fi

      # Step 3: Extract 'Projects' section from README
      - name: Extract existing project links
        run: |
          awk '/^## Projects/{flag=1; next} /^## /{flag=0} flag' README.md > existing_projects.md

      # Step 4: Fetch all public repos
      - name: Fetch list of public repos from GitHub
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/${{ github.repository_owner }}/repos?type=public&per_page=100" \
          | jq -r 'sort_by(.name) | .[] | select(.fork==false and .name != "Kentthou") | "- [\(.name)](\(.html_url))"' > all_projects.md

      # Step 5: Compare URLs, not names
      - name: Append new projects to README
        run: |
          if [ -s all_projects.md ]; then
            # Extract existing URLs
            grep -o 'https://github.com/[^)]*' existing_projects.md > existing_urls.txt

            # Extract all URLs from fetched repo list
            grep -o 'https://github.com/[^)]*' all_projects.md > all_urls.txt

            # Find only new URLs
            grep -Fxv -f existing_urls.txt all_urls.txt > new_urls.txt || true

            # Extract full lines of new project links
            grep -Ff new_urls.txt all_projects.md > new_projects_cleaned.md || true

            if [ -s new_projects_cleaned.md ]; then
              awk '
                BEGIN { in_projects = 0 }
                /^## Projects/ {
                  print
                  in_projects = 1
                  next
                }
                in_projects && /^## / {
                  in_projects = 0
                }
                {
                  print
                  if (in_projects && !printed_new_projects && /^$/) {
                    while ((getline line < "new_projects_cleaned.md") > 0) print line
                    close("new_projects_cleaned.md")
                    printed_new_projects = 1
                  }
                }
              ' README.md > README.tmp

              mv README.tmp README.md
            else
              echo "No new unique project URLs to add."
            fi
          else
            echo "Project list is empty. Skipping."
          fi

      # Step 6: Commit and push if README changed
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "Update project links in README" || echo "No changes to commit"
          git push

      # Step 7: Clean up temp files
      - name: Clean up temporary files
        run: rm -f *.md *.txt
